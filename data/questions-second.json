{
  "questions": [
    {
      "question": "What is the Context API used for in React?",
      "options": [
        "Managing global state",
        "Handling HTTP requests",
        "Styling components",
        "Data fetching"
      ],
      "correctOption": 0,
      "points": 20
    },
    {
      "question": "Which of the following is a correct way to create a custom hook in React?",
      "options": [
        "function useMyHook() {}",
        "const myHook = function() {}",
        "let useMyHook = () => {}",
        "All of the above"
      ],
      "correctOption": 3,
      "points": 30
    },
    {
      "question": "What does the useMemo hook do?",
      "options": [
        "Memorizes a computed value",
        "Triggers a memory leak warning",
        "Recomputes values on every render",
        "Updates the DOM directly"
      ],
      "correctOption": 0,
      "points": 30
    },
    {
      "question": "Which hook should be used to remember the latest value of a prop or state without triggering a re-render?",
      "options": ["useState", "useEffect", "useRef", "useCallback"],
      "correctOption": 2,
      "points": 20
    },
    {
      "question": "What is a Higher-Order Component (HOC) in React?",
      "options": [
        "A function that takes a component and returns a new component",
        "A component that renders another component",
        "A callback function used in hooks",
        "A method to increase the order of components in the DOM"
      ],
      "correctOption": 0,
      "points": 30
    },
    {
      "question": "What is Redux primarily used for?",
      "options": [
        "Managing local state",
        "Managing global state across components",
        "Styling components",
        "Data fetching and caching"
      ],
      "correctOption": 1,
      "points": 20
    },
    {
      "question": "Which of the following is a principle of Redux?",
      "options": [
        "Single source of truth",
        "Multiple stores for different data types",
        "State is mutable",
        "Actions describe the current state"
      ],
      "correctOption": 0,
      "points": 30
    },
    {
      "question": "What does SSR stand for in web development?",
      "options": [
        "Server-Side Rendering",
        "Single-Page Application",
        "Server-Side Request",
        "Stateful Service Rendering"
      ],
      "correctOption": 0,
      "points": 20
    },
    {
      "question": "Which of the following best describes 'prop drilling' in React?",
      "options": [
        "Passing props from a parent component to a deeply nested child component",
        "Injecting dependencies into a React component",
        "A technique for optimizing performance",
        "Fetching data from an API"
      ],
      "correctOption": 0,
      "points": 20
    },
    {
      "question": "What is the primary use case for the useCallback hook?",
      "options": [
        "To memoize functions",
        "To fetch data asynchronously",
        "To observe changes in the DOM",
        "To store mutable references"
      ],
      "correctOption": 0,
      "points": 30
    },
    {
      "question": "How do you optimize performance in a React application with many components?",
      "options": [
        "By using the PureComponent class for class components",
        "By using the React.memo() function for functional components",
        "By minimizing state changes",
        "All of the above"
      ],
      "correctOption": 3,
      "points": 30
    },
    {
      "question": "What is the main difference between React.Component and React.PureComponent?",
      "options": [
        "React.Component does not implement shouldComponentUpdate()",
        "React.PureComponent automatically shallow compares prop and state changes",
        "React.Component is only for class components",
        "React.PureComponent cannot use state"
      ],
      "correctOption": 1,
      "points": 30
    },
    {
      "question": "Which method in a React component should be overridden to stop the component from updating?",
      "options": [
        "shouldComponentUpdate",
        "componentDidUpdate",
        "componentWillReceiveProps",
        "getDerivedStateFromProps"
      ],
      "correctOption": 0,
      "points": 30
    },
    {
      "question": "What is the main benefit of using React.Fragment?",
      "options": [
        "To keep the DOM clean and avoid extra div wrappers",
        "To enhance component performance",
        "To group a list of children without adding extra nodes to the DOM",
        "Both A and C"
      ],
      "correctOption": 3,
      "points": 20
    },
    {
      "question": "Which API can be used to create a context in React?",
      "options": [
        "React.createContext",
        "React.useContext",
        "React.provideContext",
        "React.getContext"
      ],
      "correctOption": 0,
      "points": 20
    }
  ]
}
